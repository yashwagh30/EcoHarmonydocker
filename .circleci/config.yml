version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4

jobs:
  build-and-test:
    docker:
      - image: cimg/node:18.17  # or your preferred base image
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Build application
          command: npm run build

  build-docker-image:
    docker:
      - image: cimg/base:2023.06
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build -t $DOCKERHUB_USERNAME/your-app:$TAG .
            docker build -t $DOCKERHUB_USERNAME/your-app:latest .
      - run:
          name: Push Docker image
          command: |
            TAG=0.1.$CIRCLE_BUILD_NUM
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push $DOCKERHUB_USERNAME/your-app:$TAG
            docker push $DOCKERHUB_USERNAME/your-app:latest

  deploy-to-ec2:
    machine:
      image: ubuntu-2204:2023.07.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "your:ssh:key:fingerprint"
      - run:
          name: Deploy to EC2
          command: |
            ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '
              # Pull latest image
              docker pull '$DOCKERHUB_USERNAME'/your-app:latest
              
              # Stop existing container
              docker stop your-app || true
              docker rm your-app || true
              
              # Run new container
              docker run -d --name your-app -p 80:3000 '$DOCKERHUB_USERNAME'/your-app:latest
              
              # Clean up unused images
              docker image prune -f
            '

workflows:
  build-test-deploy:
    jobs:
      - build-and-test
      - build-docker-image:
          requires:
            - build-and-test
          filters:
            branches:
              only: main
      - deploy-to-ec2:
          requires:
            - build-docker-image
          filters:
            branches:
              only: main
